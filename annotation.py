def aggregate(node):
    strategy = node["Strategy"]

    # Sorted
    if strategy == "Sorted":
        result = "Performs the Sorted Aggregate operation. "

        # Get attributes that the tuples are grouped by
        if "Group Key" in node:
            result += "The tuples are sorted by the following key(s): "

            for key in node["Group Key"]:
                result += key + ", "

            result += "then combined to produce result(s). "

    # Hashed
    elif strategy == "Hashed":
        result = f"Performs the Hashed Aggregate operation. "

        # Get attributes that the tuples are grouped by
        if "Group Key" in node:
            result += "The tuples are hashed by the following key(s): "

            for key in node["Group Key"]:
                # Remove unnecessary strings
                result += key.replace("::text", "") + ", "

            result += "into buckets, then combined to produce result(s). "

    # Plain / Mixed
    else:
        result = f"Performs the Aggregate operation. "

        if "Group Key" in node:
            result += "The tuples are grouped by the following key(s): "

            for key in node["Group Key"]:
                result += key + ", "

            result += ", then combined to produce result(s). "

    return result


def append(node):
    return f"Performs the Append operation. This combines the results of the child operations."


def bitmap_heap_scan(node):
    result = f"Performs the Bitmap Heap Scan operation. This takes a row location bitmap generated by " \
             f"a Bitmap Index Scan on the {node['Relation Name']} relation, "

    if 'Filter' in node:
        filter_cond = node['Filter']
    else:
        filter_cond = None
    if 'Recheck Cond' in node:
        recheck_cond = node['Recheck Cond']
    else:
        recheck_cond = None

    if filter_cond and recheck_cond:
        result += f"then filters the tuples by {filter_cond} and {recheck_cond}."
    elif filter_cond:
        result += f"then filters the tuples by {filter_cond}."
    elif recheck_cond:
        result += f"then filters the tuples by {recheck_cond}."


def default(node):
    return f"Performs the {node['Node Type']} operation."

# ATTRIBUTES = {'Aggregate': ['Group Key', 'Strategy', 'Filter'],
#               'Append': [],
#               'Bitmap Heap Scan': ['Alias', 'Rows Removed by Filter', 'Filter'],
#               'Bitmap Index Scan': ['Index Name', 'Index Cond'],
#               'BitmapAnd': [],
#               'BitmapOr': [],
#               'Custom Scan': [],
#               'CTE Scan': ['Index Cond', 'CTE Name', 'Filter', 'Alias'],
#               'Foreign Scan': [],
#               'Function Scan': [],
#               'Gather': [],
#               'Gather Merge': ['Output'],
#               'Group': ['Group Key', ],
#               'GroupAggregate': [],
#               'Hash': [],
#               'HashAggregate': ['Group Key'],
#               'Hash Join': ['Hash Cond', 'Output', 'Join Type'],
#               'HashSetOp': [],
#               'Incremental Sort': [],
#               'Index-Only Scan': ['Relation Name', 'Index Cond', 'Index Name', 'Filter', 'Alias'],
#               'Index Scan': ['Relation Name', 'Index Cond', 'Filter'],
#               'Limit': ['Plan Rows'],
#               'LockRows': [],
#               'Materialize': [],
#               'Merge Append': [],
#               'Merge Join': ['Merge Cond', 'Join Type'],
#               'MixedAggregate': [],
#               'ModifyTable': [],
#               'Nested Loop': ['Join Type', 'Join Filter', 'Rows Removed by Join Filter', 'Filter',
#                               'Rows Removed by Filter'],
#               'ProjectSet': [],
#               'Recursive Union': [],
#               'Result': [],
#               'Sequential Scan': ['Relation Name', 'Alias', 'Filter'],
#               'SetOp': ['Command'],
#               'Sort': ['Sort Method', 'Sort Key'],
#               'Subquery Scan': [],
#               'TID Scan': [],
#               'Unique': [],
#               'Values Scan': [],
#               'WindowAgg': [],
#               'WorkTable Scan': []}
